---
name: Containers PR
on:
  pull_request:
    paths:
      - 'containers/**'
      - '!containers/**/CHANGELOG.md'
      - '.devcontainer/**'
      - '!.devcontainer/CHANGELOG.md'
      - '.github/workflows/containers.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions: {}

# jscpd:ignore-start
jobs:
  prep:
    name: CI Prep
    runs-on: ubuntu-latest
    outputs:
      launch: ${{ steps.interrogate.outputs.launch }}
      ci: ${{ steps.interrogate.outputs.ci }}
      post: ${{ steps.interrogate.outputs.post }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: '**/.cicache*'
          key: ${{ runner.os }}-npm-v4-${{ github.head_ref || github.ref }}

      - name: Interrogate
        id: interrogate
        shell: bash
        run: ./.ci.py interrogate

  ci:
    name: ${{ matrix.name }} ${{ matrix.id }}
    needs:
      - prep
    if: ${{ fromJson(needs.prep.outputs.ci).needed }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prep.outputs.ci).matrix }}
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write
    steps:
      - name: Configure AWS credentials
        if: ${{ matrix.container.enable || matrix.devcontainer.enable }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_ROLE_REGION }}

      - name: Login to Amazon ECR
        if: ${{ matrix.container.enable || matrix.devcontainer.enable }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to Container Registry
        uses: docker/login-action@v3
        if: ${{ matrix.container.enable || matrix.devcontainer.enable }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Container metadata
        id: container-metadata
        if: ${{ matrix.container.enable }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}
          tags: type=sha,suffix=-${{ matrix.id }}

      - name: Devcontainer metadata
        if: ${{ matrix.devcontainer.enable }}
        id: devcontainer-metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}
          flavor:
            latest=false
          tags: |
            type=sha,priority=999,suffix=-devenv-${{ matrix.id }}

      - name: Build container
        id: container-build
        if: ${{ matrix.container.enable }}
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_INLINE_CACHE: 1
        with:
          build-args: ${{ matrix.container.args }}
          cache-from: type=registry,ref=${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}:cache-${{ matrix.id }}
          cache-to: type=registry,ref=${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}:cache-${{ matrix.id }},mode=max
          context: ${{ matrix.context }}
          provenance: false
          push: true
          sbom: false
          tags: ${{ steps.container-metadata.outputs.tags }}
          platforms: ${{ matrix.platform }}

      - name: Retrieve container digest
        if: ${{ matrix.container.enable }}
        id: container-digest
        shell: bash
        run: |
          echo '${{ steps.container-metadata.outputs.tags }}@${{ steps.container-build.outputs.digest }}' > ${{ matrix.name }}-${{ steps.container-metadata.outputs.version }}.digest

      - name: Build devcontainer
        id: devcontainer-build
        if: ${{ matrix.devcontainer.enable }}
        shell: bash
        env:
          FROM_IMAGE: ${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}@${{ steps.container-build.outputs.digest }}
        run: |
          devcontainer build \
            --workspace-folder ${{ matrix.context }} \
            --cache-from type=registry,ref=${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}:devcache-${{ matrix.id }} \
            --cache-to type=registry,ref=${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}:devcache-${{ matrix.id }},mode=max \
            --platform ${{ matrix.platform }} \
            --image-name ${{ steps.devcontainer-metadata.outputs.tags }} \
            --output type=image,name=${{ steps.devcontainer-metadata.outputs.tags }},push=true

      - name: Retrieve devcontainer digest
        id: devcontainer-digest
        if: ${{ matrix.devcontainer.enable }}
        shell: bash
        run: |
          digest="$(docker buildx imagetools inspect --format '{{json .Manifest}}' ${{ steps.devcontainer-metadata.outputs.tags }} | jq -r '.digest')"
          echo "${{ steps.devcontainer-metadata.outputs.tags }}@${digest}" > ${{ matrix.name }}-${{ steps.devcontainer-metadata.outputs.version }}.digest

      - name: Upload digest files
        uses: actions/upload-artifact@v4
        if: ${{ matrix.container.enable || matrix.devcontainer.enable }}
        id: upload-digests
        with:
          name: ${{ matrix.name }}-${{ matrix.id }}
          path: '*.digest'
          if-no-files-found: 'error'
          retention-days: 1

  post:
    name: ${{ matrix.name }} ${{ matrix.id }}
    needs:
      - prep
      - ci
    if: ${{ fromJson(needs.prep.outputs.post).needed }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prep.outputs.post).matrix }}
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_ROLE_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Container metadata
        id: container-metadata
        if: ${{ matrix.container.enable }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}
          tags: type=sha,suffix=-${{ matrix.id }}

      - name: Download digests
        uses: actions/download-artifact@v4
        id: container-digests
        if: ${{ matrix.container.enable }} || ${{ matrix.devcontainer.enable }}
        with:
          merge-multiple: true
          pattern: ${{ matrix.name }}-${{ matrix.id }}-*

      - name: Publish and sign multiplatform container
        id: container-publish
        if: ${{ matrix.container.enable }}
        shell: bash
        run: |
          set -ex
          sources=( $(find . -name '*.digest' | grep -E '${{ matrix.name }}-${{ steps.container-metadata.outputs.version }}-[^-]+.digest') )
          docker buildx imagetools create -t ${{ steps.container-metadata.outputs.tags }} $(cat "${sources[@]}")
          digest="$(docker buildx imagetools inspect --format '{{json .Manifest}}' ${{ steps.container-metadata.outputs.tags }} | jq -r '.digest')"
          echo "digest=${digest}" >> "$GITHUB_OUTPUT"
          cosign sign --yes --recursive "${{ steps.container-metadata.outputs.tags }}@${digest}"

      - name: Attest published container
        uses: actions/attest-build-provenance@v1
        id: container-attest
        if: ${{ matrix.container.enable }}
        with:
          subject-name: ${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}
          subject-digest: ${{ steps.container-publish.outputs.digest }}
          push-to-registry: true

      - name: Devcontainer metadata
        if: ${{ matrix.devcontainer.enable }}
        id: devcontainer-metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}
          flavor:
            latest=false
          tags: |
            type=sha,priority=999,suffix=-devenv-${{ matrix.id }}

      - name: Publish and sign multiplatform devcontainer
        id: devcontainer-publish
        if: ${{ matrix.devcontainer.enable }}
        shell: bash
        run: |
          sources=( $(find . -name '*.digest' | grep -E '${{ matrix.name }}-${{ steps.devcontainer-metadata.outputs.version }}-[^-]+.digest') )
          docker buildx imagetools create -t ${{ steps.devcontainer-metadata.outputs.tags }} $(cat "${sources[@]}")
          digest="$(docker buildx imagetools inspect --format '{{json .Manifest}}' ${{ steps.devcontainer-metadata.outputs.tags }} | jq -r '.digest')"
          echo "digest=${digest}" >> "$GITHUB_OUTPUT"
          cosign sign --yes --recursive "${{ steps.devcontainer-metadata.outputs.tags }}@${digest}"

      - name: Attest published devcontainer
        uses: actions/attest-build-provenance@v1
        id: devcontainer-attest
        if: ${{ matrix.devcontainer.enable }}
        with:
          subject-name: ${{ secrets.AWS_ECR_DNS }}/${{ matrix.name }}
          subject-digest: ${{ steps.devcontainer-publish.outputs.digest }}
          push-to-registry: true
# jscpd:ignore-end
